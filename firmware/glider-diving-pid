#include "I2Cdev.h"

#include "MPU6050_6Axis_MotionApps20.h"

#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
#include "Wire.h"
#endif

MPU6050 mpu;

#define OUTPUT_READABLE_YAWPITCHROLL


// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorInt16 aa;         // [x, y, z]            accel sensor measurements
VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
VectorFloat gravity;    // [x, y, z]            gravity vector
float euler[3];         // [psi, theta, phi]    Euler angle container
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector

// ================================================================
// ===               INTERRUPT DETECTION ROUTINE                ===
// ================================================================

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
  mpuInterrupt = true;
}



// ================================================================
// ===                      INITIAL SETUP                       ===
// ================================================================


// variables and constants for glider hardware control
const int stepPitchPin = 4;
const int dirPitchPin = 5;
const int endStopPitchPin = 30;

const int stepRollPin = 6;
const int dirRollPin = 7;
const int endStopRollPin = 31;

const int stepEnginePin = 8;
const int dirEnginePin = 9;
const int endStopEnginePin = 32;

const int forwardDir = 0;
const int reverseDir = 1;

int pitchPos;
int pitchMax = 2800;
int pitchDelay = 900;
int rollPos;
int rollMax = 50;
int rollDelay = 3000;
int enginePos;
int engineMax = 1900;
int engineDelay = 1100;

int pitchangle;

bool pitchleft;

void setup() {
  // join I2C bus (I2Cdev library doesn't do this automatically)
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
  Wire.begin();
  TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz)
#elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
  Fastwire::setup(400, true);
#endif

  // begin serial connection
  Serial.begin(115200);
  while (!Serial);
  Serial.println(F("Initializing I2C devices..."));
  mpu.initialize();

  // verify connection
  Serial.println(F("Testing device connections..."));
  Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));

  //  // wait for ready
  //  Serial.println(F("\nSend any character to begin DMP programming and demo: "));
  //  while (Serial.available() && Serial.read()); // empty buffer
  //  while (!Serial.available());                 // wait for data
  //  while (Serial.available() && Serial.read()); // empty buffer again

  // load and configure the DMP
  Serial.println(F("Initializing DMP..."));
  devStatus = mpu.dmpInitialize();

  // supply your own gyro offsets here, scaled for min sensitivity
  mpu.setXGyroOffset(220);
  mpu.setYGyroOffset(76);
  mpu.setZGyroOffset(-85);
  mpu.setZAccelOffset(1788); // 1688 factory default for my test chip

  // make sure it worked (returns 0 if so)
  if (devStatus == 0) {
    // turn on the DMP, now that it's ready
    Serial.println(F("Enabling DMP..."));
    mpu.setDMPEnabled(true);

    // enable Arduino interrupt detection
    Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));
    attachInterrupt(0, dmpDataReady, RISING);
    mpuIntStatus = mpu.getIntStatus();

    // set our DMP Ready flag so the main loop() function knows it's okay to use it
    Serial.println(F("DMP ready! Waiting for first interrupt..."));
    dmpReady = true;

    // get expected DMP packet size for later comparison
    packetSize = mpu.dmpGetFIFOPacketSize();
  } else {
    // ERROR!
    // 1 = initial memory load failed
    // 2 = DMP configuration updates failed
    // (if it's going to break, usually the code will be 1)
    Serial.print(F("DMP Initialization failed (code "));
    Serial.print(devStatus);
    Serial.println(F(")"));
  }

  // setup() from pre-MPU glider code
  pinMode(stepRollPin, OUTPUT);
  pinMode(dirRollPin, OUTPUT);

  pinMode(stepPitchPin, OUTPUT);
  pinMode(dirPitchPin, OUTPUT);

  pinMode(stepEnginePin, OUTPUT);
  pinMode(dirEnginePin, OUTPUT);

  homeAll();
}

// methods for motor/engine run
boolean reachedEndStop(int endStop) {
  return (digitalRead(endStop) == 0);
}

boolean dirForward(int dir) {
  return (dir == 0);
}

int runMotor(int stepPin, int dirPin, int endStop, int targetPos, int currentPos, int maxPos, int motorDelay) {
  int amountToMove = currentPos - targetPos;
  //bw: 0 if forwards, 1 if backwards
  int bw = ((amountToMove / abs(amountToMove)) * 0.25 + 0.25) * 2;
  amountToMove = abs(amountToMove);
  digitalWrite(dirPin, 1 - bw);
  for (int x = 0; x < amountToMove; x++) {
    if (bw && reachedEndStop(endStop) ) {
      return 0;
    }
    if (!bw && (currentPos + 1 > maxPos)) {
      break;
    }

    digitalWrite(stepPin, HIGH);
    delayMicroseconds(motorDelay);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(motorDelay);

    currentPos += (bw * 0.5 - 0.25) * -4;
  }
  return currentPos;
}


void homeAll () {
  // home, move the motors the maximum distance towards the endstop, if the actuator is closer than the far end the endstop will stop movement
  //  rollPos = runMotor(stepRollPin, dirRollPin, endStopRollPin, forwardDir, rollMax, rollPos, rollMax, rollDelay);
  pitchPos = runMotor(stepPitchPin, dirPitchPin, endStopPitchPin, 0, pitchMax, pitchMax, pitchDelay);
  enginePos = runMotor(stepEnginePin, dirEnginePin, endStopEnginePin, 0, engineMax, engineMax, engineDelay);
  pitchleft = true;

}

void togglePitch(){
  if(pitchleft){
    pitchPos = runMotor(stepPitchPin, dirPitchPin, endStopPitchPin, pitchMax * 0.6, pitchPos, pitchMax, pitchDelay);
    pitchleft = false;
  }
  else{
    pitchPos = runMotor(stepPitchPin, dirPitchPin, endStopPitchPin, pitchMax * 0.4, pitchPos, pitchMax, pitchDelay);
    pitchleft = true;
  }
}

void diving () {
  //  rollPos = runMotor(stepRollPin, dirRollPin, endStopRollPin, reverseDir, rollMax * .1, rollPos, rollMax, rollDelay);
  pitchPos = runMotor(stepPitchPin, dirPitchPin, endStopPitchPin, pitchMax * 0.6, pitchPos, pitchMax, pitchDelay);
  enginePos = runMotor(stepEnginePin, dirEnginePin, endStopEnginePin, 0, enginePos, engineMax, engineDelay);
  delay(3000);
  pitchPos = runMotor(stepPitchPin, dirPitchPin, endStopPitchPin, pitchMax * 0.6, pitchPos, pitchMax, pitchDelay);
  enginePos = runMotor(stepEnginePin, dirEnginePin, endStopEnginePin, engineMax * 1, enginePos, engineMax, engineDelay);
  delay(3000);
  pitchPos = runMotor(stepPitchPin, dirPitchPin, endStopPitchPin, pitchMax * 0.4, pitchPos, pitchMax, pitchDelay);
}



// ================================================================
// ===                    MAIN PROGRAM LOOP                     ===
// ================================================================

void loop() {
  // if programming failed, don't try to do anything
  // DMP stands for digital motion processor - i.e. the sensor board and its processing components themselves
  if (!dmpReady) return;

  // wait for MPU interrupt or extra packet(s) available
  while (!mpuInterrupt && fifoCount < packetSize) {
    Serial.println(pitchangle);
    //togglePitch();
    // PID ALGORITHM GOES HERE

    // if you are really paranoid you can frequently test in between other
    // stuff to see if mpuInterrupt is true, and if so, "break;" from the
    // while() loop to immediately process the MPU data
  }

  // reset interrupt flag and get INT_STATUS byte
  mpuInterrupt = false;
  mpuIntStatus = mpu.getIntStatus();

  // get current FIFO count
  fifoCount = mpu.getFIFOCount();

  // check for overflow (this should never happen unless our code is too inefficient)
  if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
    // reset so we can continue cleanly
    mpu.resetFIFO();
    Serial.println(F("FIFO overflow!"));

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
  } else if (mpuIntStatus & 0x02) {
    // wait for correct available data length, should be a VERY short wait
    while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

    // read a packet from FIFO
    mpu.getFIFOBytes(fifoBuffer, packetSize);

    // track FIFO count here in case there is > 1 packet available
    // (this lets us immediately read more without waiting for an interrupt)
    fifoCount -= packetSize;

#ifdef OUTPUT_READABLE_YAWPITCHROLL
    // display Euler angles in degrees
    mpu.dmpGetQuaternion(&q, fifoBuffer);
    mpu.dmpGetGravity(&gravity, &q);
    mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
    //Serial.print("ypr\t");
    //    Serial.print(ypr[0] * 180 / M_PI);
    //    Serial.print("\t");
    //    Serial.print(ypr[1] * 180 / M_PI);
    //    Serial.print("\t");
    //    Serial.println(ypr[2] * 180 / M_PI);
    pitchangle = ypr[2] * 180 / M_PI;
#endif
  }
}
